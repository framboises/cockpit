import pymongo
import logging
from datetime import datetime, timedelta, timezone
import uuid

# Configuration du logging pour √©crire dans un fichier (√©cras√© √† chaque lancement)
logging.basicConfig(
    filename="merge.log",
    filemode="w",
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Connexion √† MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017")
db = client["titan_dev"]  # Remplacer par le nom de votre base
parametrage_col = db["parametrages"]
timetable_col = db["timetable"]

def _mk_id(seed: str) -> str:
    # UUID5 = d√©terministe (m√™me seed => m√™me id), pas al√©atoire
    return str(uuid.uuid5(uuid.NAMESPACE_URL, seed))

# -------------------------------------------------------------------
# Fonction pour calculer la dur√©e (HH:MM) entre deux heures (en consid√©rant le passage au lendemain)
# -------------------------------------------------------------------
def compute_duration(open_time, close_time):
    try:
        t_open = datetime.strptime(open_time, "%H:%M")
        t_close = datetime.strptime(close_time, "%H:%M")
    except Exception as e:
        logger.error(f"Erreur lors de la conversion des heures '{open_time}' et '{close_time}': {e}")
        return ""
    if t_close > t_open:
        delta = t_close - t_open
    else:
        delta = (t_close + timedelta(days=1)) - t_open
    hours, remainder = divmod(delta.seconds, 3600)
    minutes = remainder // 60
    duration = f"{hours:02}:{minutes:02}"
    logger.debug(f"Dur√©e calcul√©e entre {open_time} et {close_time} : {duration}")
    return duration

# -------------------------------------------------------------------
# G√©n√©ration de deux vignettes (ou une seule quand requis) √† partir d‚Äôune paire d‚Äôheures
# -------------------------------------------------------------------
def generate_vignettes_for_entry(date_str, open_time, close_time, base_activity, category, place, details, id_source, v_type, merge_remark=True):
    logger.debug(f"Generating vignettes for {base_activity} on {date_str}: open='{open_time}', close='{close_time}'")
    duration = compute_duration(open_time, close_time)

    # Calcul de la date de fermeture (si passe minuit)
    closing_date = date_str
    try:
        t_open = datetime.strptime(open_time, "%H:%M")
        t_close = datetime.strptime(close_time, "%H:%M")
        if t_close <= t_open:
            dt_date = datetime.strptime(date_str, "%Y-%m-%d")
            closing_date = (dt_date + timedelta(days=1)).strftime("%Y-%m-%d")
            logger.debug(f"Pour {base_activity}, fermeture d√©plac√©e au {closing_date}")
    except Exception as e:
        logger.error(f"Erreur lors du calcul de la date de fermeture pour {base_activity} le {date_str}: {e}")

    # üîê IDs D√âTERMINISTES (sans changer la signature ni les champs m√©tier)
    open_activity  = f"Ouverture {base_activity}"
    close_activity = f"Fermeture {base_activity}"
    open_id  = _mk_id(f"{id_source}|{date_str}|{open_activity}")
    close_id = _mk_id(f"{id_source}|{closing_date}|{close_activity}")

    open_vignette = {
        "_id": open_id,  # üëà ajout√©
        "date": date_str,
        "start": open_time,
        "end": close_time if closing_date == date_str and close_time != "23:59" else "",
        "duration": duration,
        "category": category,
        "activity": open_activity,
        "place": place,
        "department": "SAFE",
        "type": v_type,
        "origin": "param√©trage",
        "remark": f"Fermeture pr√©vue: {closing_date} {close_time}" if merge_remark and open_time != close_time and closing_date != date_str else "",
        "param_id": id_source
    }
    close_vignette = {
        "_id": close_id,  # üëà ajout√©
        "date": closing_date,
        "start": "",
        "end": close_time,
        "duration": duration,
        "category": category,
        "activity": close_activity,
        "place": place,
        "department": "SAFE",
        "type": v_type,
        "origin": "param√©trage",
        "remark": "",
        "param_id": id_source
    }
    logger.debug(f"Vignette Ouverture g√©n√©r√©e: {open_vignette}")
    logger.debug(f"Vignette Fermeture g√©n√©r√©e: {close_vignette}")
    return open_vignette, close_vignette

# -------------------------------------------------------------------
# It√©ration sur une plage de dates (format "YYYY-MM-DD")
# -------------------------------------------------------------------
def iterate_date_range(start_date_str, end_date_str):
    try:
        start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
        end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
    except Exception as e:
        logger.error(f"Erreur lors de la conversion des dates '{start_date_str}' ou '{end_date_str}': {e}")
        return
    current = start_date
    while current <= end_date:
        yield current.strftime("%Y-%m-%d")
        current += timedelta(days=1)

# -------------------------------------------------------------------
# Traitement de la section globalHoraires
# -------------------------------------------------------------------
def process_global_horaires(global_data, event, year):
    logger.info("Traitement de globalHoraires")
    vignettes = []
    # Section "center"
    for entry in global_data.get("center", []):
        date_str = entry["date"]
        id_source = entry.get("id", f"center_{date_str}_{entry.get('openTime','')}")
        v_pair = generate_vignettes_for_entry(
            date_str,
            entry["openTime"],
            entry["closeTime"],
            "Centre accr√©ditation",
            "Accreditations",
            "Centre accr√©ditation",
            {},
            id_source,
            "Organization"
        )
        vignettes.extend(v_pair)
    # Section "dates"
    for entry in global_data.get("dates", []):
        if entry.get("is24h") or entry.get("closed"):
            logger.info(f"Ignor√© globalHoraires.dates pour {entry.get('date')} (is24h/closed)")
            continue
        date_str = entry["date"]
        id_source = f"dates_{date_str}_{entry.get('openTime','')}"
        v_pair = generate_vignettes_for_entry(
            date_str,
            entry["openTime"],
            entry["closeTime"],
            "au public",
            "General",
            "Controle",
            {},
            id_source,
            "Timetable"
        )
        vignettes.extend(v_pair)
    # Section "demontage"
    if "demontage" in global_data:
        dem = global_data["demontage"]
        start_dt = datetime.fromisoformat(dem["start"].replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        end_dt = datetime.fromisoformat(dem["end"].replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        id_source = "demontage"
        v_pair = generate_vignettes_for_entry(
            start_dt.strftime("%Y-%m-%d"),
            start_dt.strftime("%H:%M"),
            end_dt.strftime("%H:%M"),
            "D√©montage",
            "Controle",
            "Demontage",
            {},
            id_source,
            "Timetable"
        )
        vignettes.extend(v_pair)
    # Section "endBadge" : une seule vignette
    if "endBadge" in global_data:
        end_badge_iso = global_data["endBadge"]
        dt = datetime.fromisoformat(end_badge_iso.replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        date_str = dt.strftime("%Y-%m-%d")
        id_source = "endBadge"
        v = {
            "date": date_str,
            "start": dt.strftime("%H:%M"),
            "end": "",
            "duration": "",
            "category": "Controle",
            "activity": "Fin de la validit√© du badge salari√©",
            "place": "Badges",
            "department": "SAFE",
            "type": "Timetable",
            "origin": "param√©trage",
            "remark": "",
            "param_id": id_source
        }
        vignettes.append(v)
        logger.debug(f"Vignette endBadge g√©n√©r√©e: {v}")
    # Section "helpDesk"
    if "helpDesk" in global_data:
        hd = global_data["helpDesk"]
        id_source = "helpDesk"
        for d in iterate_date_range(hd["start"], hd["end"]):
            v_pair = generate_vignettes_for_entry(
                d,
                hd["openTime"],
                hd["closeTime"],
                "Help Desk",
                "Accreditations",
                "Help Desk",
                {},
                id_source,
                "Organization"
            )
            vignettes.extend(v_pair)
    # Section "montage" ‚Äì Traitement sp√©cifique pour montage (longue p√©riode)‚ÄØ:
    if "montage" in global_data:
        mon = global_data["montage"]
        start_dt = datetime.fromisoformat(mon["start"].replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        end_dt = datetime.fromisoformat(mon["end"].replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        id_source = "montage"
        # Vignette d'ouverture avec date du start_dt
        open_v = {
            "date": start_dt.strftime("%Y-%m-%d"),
            "start": start_dt.strftime("%H:%M"),
            "end": "",
            "duration": compute_duration(start_dt.strftime("%H:%M"), end_dt.strftime("%H:%M")),
            "category": "Controle",
            "activity": "D√©but du montage",
            "place": "Montage",
            "department": "SAFE",
            "type": "Timetable",
            "origin": "param√©trage",
            "remark": f"Fermeture pr√©vue: {end_dt.strftime('%H:%M')}",
            "param_id": id_source
        }
        # Vignette de fermeture avec la date r√©elle de end_dt
        close_v = {
            "date": end_dt.strftime("%Y-%m-%d"),
            "start": "",
            "end": end_dt.strftime("%H:%M"),
            "duration": "",
            "category": "Controle",
            "activity": "Fin du montage",
            "place": "Montage",
            "department": "SAFE",
            "type": "Timetable",
            "origin": "param√©trage",
            "remark": "",
            "param_id": id_source
        }
        vignettes.extend([open_v, close_v])
    # Section "paddockScan"
    if "paddockScan" in global_data:
        ps_iso = global_data["paddockScan"]
        dt = datetime.fromisoformat(ps_iso.replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        date_str = dt.strftime("%Y-%m-%d")
        id_source = "paddockScan"
        # On g√©n√®re une seule vignette pour le scan
        v = {
            "date": date_str,
            "start": dt.strftime("%H:%M"),
            "end": "",
            "duration": "",
            "category": "Controle",
            "activity": "Mise en place du contr√¥le par scan",
            "place": "Scan",
            "department": "SAFE",
            "type": "Timetable",
            "origin": "param√©trage",
            "remark": "",
            "param_id": id_source
        }
        vignettes.append(v)
        logger.debug(f"Vignette paddockScan g√©n√©r√©e: {v}")
    # Section "pcOrga"
    for entry in global_data.get("pcOrga", []):
        date_str = entry["date"]
        id_source = entry.get("id", f"pcOrga_{date_str}_{entry.get('openTime','')}")
        v_pair = generate_vignettes_for_entry(
            date_str,
            entry["openTime"],
            entry["closeTime"],
            "PC Organisation",
            "Controle",
            "PC Organisation",
            {},
            id_source,
            "Organization"
        )
        vignettes.extend(v_pair)
    # Section "pcAuthorities"
    for entry in global_data.get("pcAuthorities", []):
        date_str = entry["date"]
        id_source = entry.get("id", f"pcAuthorities_{date_str}_{entry.get('openTime','')}")
        v_pair = generate_vignettes_for_entry(
            date_str,
            entry["openTime"],
            entry["closeTime"],
            "PC Autorit√©s",
            "Controle",
            "PC Autorit√©s",
            {},
            id_source,
            "Organization"
        )
        vignettes.extend(v_pair)
    # Section "scan"
    if "scan" in global_data:
        scan_iso = global_data["scan"]
        dt = datetime.fromisoformat(scan_iso.replace("Z", "+00:00")).astimezone(timezone(timedelta(hours=2)))
        date_str = dt.strftime("%Y-%m-%d")
        id_source = "scan"
        v = {
            "date": date_str,
            "start": dt.strftime("%H:%M"),
            "end": "",
            "duration": "",
            "category": "Controle",
            "activity": "Mise en place du contr√¥le par scan",
            "place": "Scan",
            "department": "SAFE",
            "type": "Timetable",
            "origin": "param√©trage",
            "remark": "",
            "param_id": id_source
        }
        vignettes.append(v)
        logger.debug(f"Vignette scan g√©n√©r√©e: {v}")
    logger.info(f"{len(vignettes)} vignettes g√©n√©r√©es pour globalHoraires")
    return vignettes

def process_portes_horaires(portes_data, event, year):
    logger.info("Traitement de portesHoraires")
    vignettes = []
    for porte_name, porte_info in portes_data.items():
        id_source = porte_info.get("id", porte_name)
        for date_entry in porte_info.get("dates", []):
            date_str = date_entry["date"]
            details = porte_info.get("controle", {})
            org = date_entry.get("organisation", {})
            pub = date_entry.get("public", {})
            valid_org = org and "open" in org and "close" in org and not (org.get("is24h") or org.get("closed"))
            valid_pub = pub and "open" in pub and "close" in pub and not (pub.get("is24h") or pub.get("closed"))
            if valid_org and valid_pub and org["open"] == pub["open"] and org["close"] == pub["close"]:
                v_pair = generate_vignettes_for_entry(
                    date_str,
                    org["open"],
                    org["close"],
                    f"Porte {porte_name}",
                    "Controle",
                    porte_name,
                    {"remark": "Organisation & Public"},
                    id_source,
                    "Organization"
                )
                vignettes.extend(v_pair)
                logger.debug(f"Fusionn√©es vignettes pour Porte {porte_name} (Organisation & Public) le {date_str}")
            else:
                if valid_org:
                    v_pair = generate_vignettes_for_entry(
                        date_str,
                        org["open"],
                        org["close"],
                        f"Porte {porte_name} - Organisation",
                        "Controle",
                        porte_name,
                        {},
                        id_source,
                        "Organization"
                    )
                    vignettes.extend(v_pair)
                    logger.debug(f"Vignettes pour Porte {porte_name} - Organisation g√©n√©r√©es le {date_str}")
                if valid_pub:
                    v_pair = generate_vignettes_for_entry(
                        date_str,
                        pub["open"],
                        pub["close"],
                        f"Porte {porte_name} - Public",
                        "Porte",
                        porte_name,
                        {},
                        id_source,
                        "Organization"
                    )
                    vignettes.extend(v_pair)
                    logger.debug(f"Vignettes pour Porte {porte_name} - Public g√©n√©r√©es le {date_str}")
    logger.info(f"{len(vignettes)} vignettes g√©n√©r√©es pour portesHoraires")
    return vignettes

def process_parkings_horaires(parkings_list, event, year):
    logger.info("Traitement de parkingsHoraires")
    vignettes = []
    for parking in parkings_list:
        id_source = parking.get("id", parking.get("name", "parking"))
        parking_name = parking.get("name", "Parking")
        details = parking.get("controle", {})
        for date_entry in parking.get("dates", []):
            date_str = date_entry["date"]
            org = date_entry.get("organisation", {})
            pub = date_entry.get("public", {})
            valid_org = org and "open" in org and "close" in org and not (org.get("is24h") or org.get("closed"))
            valid_pub = pub and "open" in pub and "close" in pub and not (pub.get("is24h") or pub.get("closed"))
            if valid_org and valid_pub and org["open"] == pub["open"] and org["close"] == pub["close"]:
                v_pair = generate_vignettes_for_entry(
                    date_str,
                    org["open"],
                    org["close"],
                    f"Parking {parking_name}",
                    "Parking",
                    parking_name,
                    {"remark": "Organisation & Public"},
                    id_source,
                    "Organization"
                )
                vignettes.extend(v_pair)
                logger.debug(f"Fusionn√©es vignettes pour Parking {parking_name} (Organisation & Public) le {date_str}")
            else:
                if valid_org:
                    v_pair = generate_vignettes_for_entry(
                        date_str,
                        org["open"],
                        org["close"],
                        f"Parking {parking_name} - Organisation",
                        "Controle",
                        parking_name,
                        {},
                        id_source,
                        "Organization"
                    )
                    vignettes.extend(v_pair)
                    logger.debug(f"Vignettes pour Parking {parking_name} - Organisation g√©n√©r√©es le {date_str}")
                if valid_pub:
                    v_pair = generate_vignettes_for_entry(
                        date_str,
                        pub["open"],
                        pub["close"],
                        f"Parking {parking_name} - Public",
                        "Controle",
                        parking_name,
                        {},
                        id_source,
                        "Organization"
                    )
                    vignettes.extend(v_pair)
                    logger.debug(f"Vignettes pour Parking {parking_name} - Public g√©n√©r√©es le {date_str}")
    logger.info(f"{len(vignettes)} vignettes g√©n√©r√©es pour parkingsHoraires")
    return vignettes

def process_campings_horaires(campings_list, event, year):
    logger.info("Traitement de campingsHoraires")
    vignettes = []
    for camping in campings_list:
        id_source = camping.get("id", camping.get("name", "camping"))
        camping_name = camping.get("name", "Camping")
        details = camping.get("controle", {})
        # On trie les entr√©es par date
        dates_list = sorted(camping.get("dates", []), key=lambda d: d["date"])
        for i, date_entry in enumerate(dates_list):
            date_str = date_entry["date"]
            pub = date_entry.get("public", {})
            # Si l'entr√©e est marqu√©e is24h ou si les horaires sont manquants ou si "closed" est True, on ignore
            if not pub or "open" not in pub or "close" not in pub or date_entry.get("is24h") or pub.get("closed"):
                logger.debug(f"Ignor√© camping {camping_name} pour {date_str}")
                continue

            # D√©terminer si l'ouverture ou la fermeture doivent √™tre ignor√©es en fonction des jours adjacents
            skip_open = False
            skip_close = False
            # Si l'heure d'ouverture est "00:00" et que la veille est en 24h
            if pub.get("open") == "00:00" and i > 0 and dates_list[i-1].get("is24h") is True:
                skip_open = True
            # Si l'heure de fermeture est "23:59" et que le lendemain est en 24h
            if pub.get("close") == "23:59" and i < len(dates_list)-1 and dates_list[i+1].get("is24h") is True:
                skip_close = True

            logger.debug(f"Pour camping {camping_name} le {date_str}, skip_open={skip_open}, skip_close={skip_close}")

            # G√©n√©rer la paire de vignettes
            open_v, close_v = generate_vignettes_for_entry(
                date_str,
                pub["open"],
                pub["close"],
                f"Aire d'accueil {camping_name}",
                "AA",
                camping_name,
                details,
                id_source,
                "Organization"
            )
            # N'ajouter que celles non ignor√©es
            if not skip_open:
                vignettes.append(open_v)
            if not skip_close:
                vignettes.append(close_v)
    logger.info(f"{len(vignettes)} vignettes g√©n√©r√©es pour campingsHoraires")
    return vignettes

def process_hospis_horaires(hospis_list, event, year):
    logger.info("Traitement de hospisHoraires")
    vignettes = []
    for hospis in hospis_list:
        id_source = hospis.get("id", hospis.get("name", "hospis"))
        hospis_name = hospis.get("name", "Hospitalit√©")
        details = hospis.get("controle", {})
        for date_entry in hospis.get("dates", []):
            date_str = date_entry["date"]
            open_time = date_entry.get("openTime")
            close_time = date_entry.get("closeTime")
            is24h = date_entry.get("is24h")
            if is24h or not open_time or not close_time:
                logger.debug(f"Ignor√© hospitalit√© {hospis_name} pour {date_str} (is24h={is24h} ou horaires manquants)")
            else:
                v_pair = generate_vignettes_for_entry(
                    date_str,
                    open_time,
                    close_time,
                    f"Hospitalit√© {hospis_name}",
                    "Hospi",
                    hospis_name,
                    details,
                    id_source,
                    "Organization"
                )
                vignettes.extend(v_pair)
    logger.info(f"{len(vignettes)} vignettes g√©n√©r√©es pour hospisHoraires")
    return vignettes

def process_parametrage_document(doc):
    event = doc["event"]
    year = doc["year"]
    data = doc["data"]
    vignettes = []
    logger.info(f"D√©but du traitement du document de param√©trage pour {event} {year}")
    if "globalHoraires" in data:
        vignettes.extend(process_global_horaires(data["globalHoraires"], event, year))
    if "portesHoraires" in data:
        vignettes.extend(process_portes_horaires(data["portesHoraires"], event, year))
    if "parkingsHoraires" in data:
        vignettes.extend(process_parkings_horaires(data["parkingsHoraires"], event, year))
    if "campingsHoraires" in data:
        vignettes.extend(process_campings_horaires(data["campingsHoraires"], event, year))
    if "hospisHoraires" in data:
        vignettes.extend(process_hospis_horaires(data["hospisHoraires"], event, year))
    logger.info(f"Fin du traitement du document de param√©trage, {len(vignettes)} vignettes g√©n√©r√©es")
    return vignettes

# -------------------------------------------------------------------
# Mise √† jour du document timetable
# -------------------------------------------------------------------
def update_timetable_document(event, year, vignettes):
    logger.info(f"Mise √† jour du document timetable pour {event} {year}")
    timetable_doc = timetable_col.find_one({"event": event, "year": year})
    if not timetable_doc:
        timetable_doc = {"event": event, "year": year, "data": {}}
        logger.info("Cr√©ation d'un nouveau document timetable")
    data_field = timetable_doc.get("data", {})

    for v in vignettes:
        date_key = v["date"]
        data_field.setdefault(date_key, [])
        items = data_field[date_key]

        # 1) si _id pr√©sent ‚Üí on remplace l'existant
        if v.get("_id"):
            idx = next((i for i, x in enumerate(items) if x.get("_id") == v["_id"]), None)
            if idx is not None:
                # Priorit√© √† manual-edit si jamais tu merges deux flux
                keep = v if v.get("origin") == "manual-edit" or items[idx].get("origin") != "manual-edit" else items[idx]
                items[idx] = keep
                continue

        # 2) fallback historique: (param_id, activity)
        idx = next((i for i, x in enumerate(items)
                    if x.get("param_id") == v.get("param_id") and x.get("activity") == v.get("activity")), None)
        if idx is not None:
            items[idx] = v
        else:
            items.append(v)

    timetable_doc["data"] = data_field
    timetable_col.update_one({"event": event, "year": year}, {"$set": timetable_doc}, upsert=True)
    logger.info("Document timetable mis √† jour")

# -------------------------------------------------------------------
# Fonction principale
# -------------------------------------------------------------------
def main(event, year):
    logger.info(f"D√©but du traitement pour l'√©v√©nement {event} et l'ann√©e {year}")
    parametrage_doc = parametrage_col.find_one({"event": event, "year": year})
    if not parametrage_doc:
        logger.error(f"Aucun document de param√©trage trouv√© pour l'√©v√©nement {event} et l'ann√©e {year}")
        return
    vignettes = process_parametrage_document(parametrage_doc)
    update_timetable_document(event, year, vignettes)
    logger.info(f"Traitement termin√© pour l'√©v√©nement {event} et l'ann√©e {year}")

# -------------------------------------------------------------------
# Ex√©cution principale
# -------------------------------------------------------------------
# -------------------------------------------------------------------
# Lancement interactif (choix ann√©e + √©v√©nement)
# -------------------------------------------------------------------
EVENT_CHOICES = [
    "24H AUTOS",
    "24H MOTOS",
    "GPF",
    "GP EXPLORER",
    "SUPERBIKE",
    "LE MANS CLASSIC",
    "24H CAMIONS",
]

def _prompt_year() -> str:
    while True:
        y = input("Ann√©e (format YYYY) : ").strip()
        if len(y) == 4 and y.isdigit():
            return y
        print("‚õî Format invalide. Merci d'entrer une ann√©e sur 4 chiffres, ex: 2025.")

def _prompt_event() -> str:
    print("\nS√©lectionne l'√©v√©nement :")
    for i, name in enumerate(EVENT_CHOICES, start=1):
        print(f"  {i}. {name}")
    while True:
        s = input("Num√©ro ou nom exact : ").strip()
        # choix par num√©ro
        if s.isdigit():
            idx = int(s)
            if 1 <= idx <= len(EVENT_CHOICES):
                return EVENT_CHOICES[idx - 1]
        # choix par nom (insensible √† la casse/espaces)
        for name in EVENT_CHOICES:
            if s.lower() == name.lower():
                return name
        print("‚õî Choix invalide. Entre un num√©ro de la liste ou le nom exact.")

if __name__ == "__main__":
    try:
        year_value = _prompt_year()
        event_value = _prompt_event()
        print(f"\n‚û°Ô∏è  Lancement du merge pour '{event_value}' {year_value}...\n")
        main(event_value, year_value)
        print("\n‚úÖ Termin√©.")
    except KeyboardInterrupt:
        print("\nOp√©ration annul√©e.")
